# coding: utf-8

"""
    Nature API

    Read/Write Nature Remo  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nature_api_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_appliance_orders_post(self, appliances, **kwargs):  # noqa: E501
        """v1_appliance_orders_post  # noqa: E501

        Reorder appliances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliance_orders_post(appliances, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliances: List of all appliances' IDs comma separated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_appliance_orders_post_with_http_info(appliances, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_appliance_orders_post_with_http_info(appliances, **kwargs)  # noqa: E501
            return data

    def v1_appliance_orders_post_with_http_info(self, appliances, **kwargs):  # noqa: E501
        """v1_appliance_orders_post  # noqa: E501

        Reorder appliances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliance_orders_post_with_http_info(appliances, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliances: List of all appliances' IDs comma separated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appliances']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_appliance_orders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appliances' is set
        if ('appliances' not in params or
                params['appliances'] is None):
            raise ValueError("Missing the required parameter `appliances` when calling `v1_appliance_orders_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'appliances' in params:
            form_params.append(('appliances', params['appliances']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/appliance_orders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_appliances_appliance_aircon_settings_post(self, appliance, **kwargs):  # noqa: E501
        """v1_appliances_appliance_aircon_settings_post  # noqa: E501

        Update air conditioner settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_aircon_settings_post(appliance, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliance: Appliance ID. (required)
        :param str temperature: Temperature
        :param str operation_mode: AC operation mode
        :param str air_volume: AC air volume
        :param str air_direction: AC air direction
        :param str button: Button
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_appliances_appliance_aircon_settings_post_with_http_info(appliance, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_appliances_appliance_aircon_settings_post_with_http_info(appliance, **kwargs)  # noqa: E501
            return data

    def v1_appliances_appliance_aircon_settings_post_with_http_info(self, appliance, **kwargs):  # noqa: E501
        """v1_appliances_appliance_aircon_settings_post  # noqa: E501

        Update air conditioner settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_aircon_settings_post_with_http_info(appliance, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliance: Appliance ID. (required)
        :param str temperature: Temperature
        :param str operation_mode: AC operation mode
        :param str air_volume: AC air volume
        :param str air_direction: AC air direction
        :param str button: Button
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appliance', 'temperature', 'operation_mode', 'air_volume', 'air_direction', 'button']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_appliances_appliance_aircon_settings_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appliance' is set
        if ('appliance' not in params or
                params['appliance'] is None):
            raise ValueError("Missing the required parameter `appliance` when calling `v1_appliances_appliance_aircon_settings_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance' in params:
            path_params['appliance'] = params['appliance']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'temperature' in params:
            form_params.append(('temperature', params['temperature']))  # noqa: E501
        if 'operation_mode' in params:
            form_params.append(('operation_mode', params['operation_mode']))  # noqa: E501
        if 'air_volume' in params:
            form_params.append(('air_volume', params['air_volume']))  # noqa: E501
        if 'air_direction' in params:
            form_params.append(('air_direction', params['air_direction']))  # noqa: E501
        if 'button' in params:
            form_params.append(('button', params['button']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/appliances/{appliance}/aircon_settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_appliances_appliance_delete_post(self, appliance, **kwargs):  # noqa: E501
        """v1_appliances_appliance_delete_post  # noqa: E501

        Delete appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_delete_post(appliance, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliance: Appliance ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_appliances_appliance_delete_post_with_http_info(appliance, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_appliances_appliance_delete_post_with_http_info(appliance, **kwargs)  # noqa: E501
            return data

    def v1_appliances_appliance_delete_post_with_http_info(self, appliance, **kwargs):  # noqa: E501
        """v1_appliances_appliance_delete_post  # noqa: E501

        Delete appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_delete_post_with_http_info(appliance, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliance: Appliance ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appliance']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_appliances_appliance_delete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appliance' is set
        if ('appliance' not in params or
                params['appliance'] is None):
            raise ValueError("Missing the required parameter `appliance` when calling `v1_appliances_appliance_delete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance' in params:
            path_params['appliance'] = params['appliance']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/appliances/{appliance}/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_appliances_appliance_post(self, appliance, image, nickname, **kwargs):  # noqa: E501
        """v1_appliances_appliance_post  # noqa: E501

        Update appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_post(appliance, image, nickname, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliance: Appliance ID. (required)
        :param str image: Basename of the image file included in the app. Ex: \"ico_ac_1\"  (required)
        :param str nickname: Appliance name (required)
        :return: Appliance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_appliances_appliance_post_with_http_info(appliance, image, nickname, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_appliances_appliance_post_with_http_info(appliance, image, nickname, **kwargs)  # noqa: E501
            return data

    def v1_appliances_appliance_post_with_http_info(self, appliance, image, nickname, **kwargs):  # noqa: E501
        """v1_appliances_appliance_post  # noqa: E501

        Update appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_post_with_http_info(appliance, image, nickname, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliance: Appliance ID. (required)
        :param str image: Basename of the image file included in the app. Ex: \"ico_ac_1\"  (required)
        :param str nickname: Appliance name (required)
        :return: Appliance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appliance', 'image', 'nickname']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_appliances_appliance_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appliance' is set
        if ('appliance' not in params or
                params['appliance'] is None):
            raise ValueError("Missing the required parameter `appliance` when calling `v1_appliances_appliance_post`")  # noqa: E501
        # verify the required parameter 'image' is set
        if ('image' not in params or
                params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `v1_appliances_appliance_post`")  # noqa: E501
        # verify the required parameter 'nickname' is set
        if ('nickname' not in params or
                params['nickname'] is None):
            raise ValueError("Missing the required parameter `nickname` when calling `v1_appliances_appliance_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance' in params:
            path_params['appliance'] = params['appliance']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'nickname' in params:
            form_params.append(('nickname', params['nickname']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/appliances/{appliance}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Appliance',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_appliances_appliance_signal_orders_post(self, appliance, signals, **kwargs):  # noqa: E501
        """v1_appliances_appliance_signal_orders_post  # noqa: E501

        Reorder signals under this appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_signal_orders_post(appliance, signals, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliance: Appliance ID. (required)
        :param str signals: List of all signals' IDs comma separated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_appliances_appliance_signal_orders_post_with_http_info(appliance, signals, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_appliances_appliance_signal_orders_post_with_http_info(appliance, signals, **kwargs)  # noqa: E501
            return data

    def v1_appliances_appliance_signal_orders_post_with_http_info(self, appliance, signals, **kwargs):  # noqa: E501
        """v1_appliances_appliance_signal_orders_post  # noqa: E501

        Reorder signals under this appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_signal_orders_post_with_http_info(appliance, signals, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliance: Appliance ID. (required)
        :param str signals: List of all signals' IDs comma separated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appliance', 'signals']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_appliances_appliance_signal_orders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appliance' is set
        if ('appliance' not in params or
                params['appliance'] is None):
            raise ValueError("Missing the required parameter `appliance` when calling `v1_appliances_appliance_signal_orders_post`")  # noqa: E501
        # verify the required parameter 'signals' is set
        if ('signals' not in params or
                params['signals'] is None):
            raise ValueError("Missing the required parameter `signals` when calling `v1_appliances_appliance_signal_orders_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance' in params:
            path_params['appliance'] = params['appliance']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'signals' in params:
            form_params.append(('signals', params['signals']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/appliances/{appliance}/signal_orders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_appliances_appliance_signals_get(self, appliance, **kwargs):  # noqa: E501
        """v1_appliances_appliance_signals_get  # noqa: E501

        Fetch signals registered under this appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_signals_get(appliance, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliance: Appliance ID. (required)
        :return: list[Signal]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_appliances_appliance_signals_get_with_http_info(appliance, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_appliances_appliance_signals_get_with_http_info(appliance, **kwargs)  # noqa: E501
            return data

    def v1_appliances_appliance_signals_get_with_http_info(self, appliance, **kwargs):  # noqa: E501
        """v1_appliances_appliance_signals_get  # noqa: E501

        Fetch signals registered under this appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_signals_get_with_http_info(appliance, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str appliance: Appliance ID. (required)
        :return: list[Signal]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appliance']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_appliances_appliance_signals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appliance' is set
        if ('appliance' not in params or
                params['appliance'] is None):
            raise ValueError("Missing the required parameter `appliance` when calling `v1_appliances_appliance_signals_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance' in params:
            path_params['appliance'] = params['appliance']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/appliances/{appliance}/signals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Signal]',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_appliances_appliance_signals_post(self, message, appliance, image, name, **kwargs):  # noqa: E501
        """v1_appliances_appliance_signals_post  # noqa: E501

        Create a signal under this appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_signals_post(message, appliance, image, name, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str message: JSON serialized object describing infrared signals. Includes \"data\", \"freq\" and \"format\" keys. (required)
        :param str appliance: Appliance ID. (required)
        :param str image: Basename of the image file included in the app. Ex: \"ico_io\"  (required)
        :param str name: Signal name (required)
        :return: Signal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_appliances_appliance_signals_post_with_http_info(message, appliance, image, name, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_appliances_appliance_signals_post_with_http_info(message, appliance, image, name, **kwargs)  # noqa: E501
            return data

    def v1_appliances_appliance_signals_post_with_http_info(self, message, appliance, image, name, **kwargs):  # noqa: E501
        """v1_appliances_appliance_signals_post  # noqa: E501

        Create a signal under this appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_appliance_signals_post_with_http_info(message, appliance, image, name, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str message: JSON serialized object describing infrared signals. Includes \"data\", \"freq\" and \"format\" keys. (required)
        :param str appliance: Appliance ID. (required)
        :param str image: Basename of the image file included in the app. Ex: \"ico_io\"  (required)
        :param str name: Signal name (required)
        :return: Signal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['message', 'appliance', 'image', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_appliances_appliance_signals_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'message' is set
        if ('message' not in params or
                params['message'] is None):
            raise ValueError("Missing the required parameter `message` when calling `v1_appliances_appliance_signals_post`")  # noqa: E501
        # verify the required parameter 'appliance' is set
        if ('appliance' not in params or
                params['appliance'] is None):
            raise ValueError("Missing the required parameter `appliance` when calling `v1_appliances_appliance_signals_post`")  # noqa: E501
        # verify the required parameter 'image' is set
        if ('image' not in params or
                params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `v1_appliances_appliance_signals_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `v1_appliances_appliance_signals_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance' in params:
            path_params['appliance'] = params['appliance']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'message' in params:
            form_params.append(('message', params['message']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/appliances/{appliance}/signals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Signal',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_appliances_get(self, **kwargs):  # noqa: E501
        """v1_appliances_get  # noqa: E501

        Fetch the list of appliances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_get(_async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Appliance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_appliances_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_appliances_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_appliances_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_appliances_get  # noqa: E501

        Fetch the list of appliances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_get_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Appliance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_appliances_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/appliances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Appliance]',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_appliances_post(self, nickname, device, image, **kwargs):  # noqa: E501
        """v1_appliances_post  # noqa: E501

        Create a new appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_post(nickname, device, image, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str nickname: Appliance name (required)
        :param str device: Device ID (required)
        :param str image: Basename of the image file included in the app. Ex: \"ico_ac_1\"  (required)
        :param str model: ApplianceModel ID if the appliance we're trying to create is included in IRDB.
        :return: Appliance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_appliances_post_with_http_info(nickname, device, image, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_appliances_post_with_http_info(nickname, device, image, **kwargs)  # noqa: E501
            return data

    def v1_appliances_post_with_http_info(self, nickname, device, image, **kwargs):  # noqa: E501
        """v1_appliances_post  # noqa: E501

        Create a new appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_appliances_post_with_http_info(nickname, device, image, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str nickname: Appliance name (required)
        :param str device: Device ID (required)
        :param str image: Basename of the image file included in the app. Ex: \"ico_ac_1\"  (required)
        :param str model: ApplianceModel ID if the appliance we're trying to create is included in IRDB.
        :return: Appliance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nickname', 'device', 'image', 'model']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_appliances_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nickname' is set
        if ('nickname' not in params or
                params['nickname'] is None):
            raise ValueError("Missing the required parameter `nickname` when calling `v1_appliances_post`")  # noqa: E501
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `v1_appliances_post`")  # noqa: E501
        # verify the required parameter 'image' is set
        if ('image' not in params or
                params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `v1_appliances_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'nickname' in params:
            form_params.append(('nickname', params['nickname']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'device' in params:
            form_params.append(('device', params['device']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/appliances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Appliance',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_detectappliance_post(self, message, **kwargs):  # noqa: E501
        """v1_detectappliance_post  # noqa: E501

        Find the air conditioner best matching the provided infrared signal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_detectappliance_post(message, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str message: JSON serialized object describing infrared signals. Includes \"data\", \"freq\" and \"format\" keys. (required)
        :return: list[ApplianceModelAndParam]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_detectappliance_post_with_http_info(message, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_detectappliance_post_with_http_info(message, **kwargs)  # noqa: E501
            return data

    def v1_detectappliance_post_with_http_info(self, message, **kwargs):  # noqa: E501
        """v1_detectappliance_post  # noqa: E501

        Find the air conditioner best matching the provided infrared signal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_detectappliance_post_with_http_info(message, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str message: JSON serialized object describing infrared signals. Includes \"data\", \"freq\" and \"format\" keys. (required)
        :return: list[ApplianceModelAndParam]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['message']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_detectappliance_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'message' is set
        if ('message' not in params or
                params['message'] is None):
            raise ValueError("Missing the required parameter `message` when calling `v1_detectappliance_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'message' in params:
            form_params.append(('message', params['message']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/detectappliance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApplianceModelAndParam]',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_delete_post(self, device, **kwargs):  # noqa: E501
        """v1_devices_device_delete_post  # noqa: E501

        Delete Remo.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_devices_device_delete_post(device, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str device: Device ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_devices_device_delete_post_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_delete_post_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_delete_post_with_http_info(self, device, **kwargs):  # noqa: E501
        """v1_devices_device_delete_post  # noqa: E501

        Delete Remo.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_devices_device_delete_post_with_http_info(device, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str device: Device ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_delete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `v1_devices_device_delete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/devices/{device}/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_humidity_offset_post(self, device, offset, **kwargs):  # noqa: E501
        """v1_devices_device_humidity_offset_post  # noqa: E501

        Update humidity offset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_devices_device_humidity_offset_post(device, offset, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str device: Device ID. (required)
        :param int offset: Humidity offset value added to the measured humidity. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_devices_device_humidity_offset_post_with_http_info(device, offset, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_humidity_offset_post_with_http_info(device, offset, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_humidity_offset_post_with_http_info(self, device, offset, **kwargs):  # noqa: E501
        """v1_devices_device_humidity_offset_post  # noqa: E501

        Update humidity offset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_devices_device_humidity_offset_post_with_http_info(device, offset, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str device: Device ID. (required)
        :param int offset: Humidity offset value added to the measured humidity. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_humidity_offset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `v1_devices_device_humidity_offset_post`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `v1_devices_device_humidity_offset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'offset' in params:
            form_params.append(('offset', params['offset']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/devices/{device}/humidity_offset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_post(self, device, name, **kwargs):  # noqa: E501
        """v1_devices_device_post  # noqa: E501

        Update Remo  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_devices_device_post(device, name, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str device: Device ID. (required)
        :param str name: Signal name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_devices_device_post_with_http_info(device, name, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_post_with_http_info(device, name, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_post_with_http_info(self, device, name, **kwargs):  # noqa: E501
        """v1_devices_device_post  # noqa: E501

        Update Remo  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_devices_device_post_with_http_info(device, name, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str device: Device ID. (required)
        :param str name: Signal name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `v1_devices_device_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `v1_devices_device_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/devices/{device}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_temperature_offset_post(self, device, offset, **kwargs):  # noqa: E501
        """v1_devices_device_temperature_offset_post  # noqa: E501

        Update temperature offset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_devices_device_temperature_offset_post(device, offset, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str device: Device ID. (required)
        :param int offset: Temperature offset value added to the measured temperature. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_devices_device_temperature_offset_post_with_http_info(device, offset, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_temperature_offset_post_with_http_info(device, offset, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_temperature_offset_post_with_http_info(self, device, offset, **kwargs):  # noqa: E501
        """v1_devices_device_temperature_offset_post  # noqa: E501

        Update temperature offset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_devices_device_temperature_offset_post_with_http_info(device, offset, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str device: Device ID. (required)
        :param int offset: Temperature offset value added to the measured temperature. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_temperature_offset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `v1_devices_device_temperature_offset_post`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `v1_devices_device_temperature_offset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'offset' in params:
            form_params.append(('offset', params['offset']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/devices/{device}/temperature_offset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_get(self, **kwargs):  # noqa: E501
        """v1_devices_get  # noqa: E501

        Fetch the list of Remo devices the user has access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_devices_get(_async=True)
        >>> result = thread.get()

        :param async bool
        :return: Devices
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_devices_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_get  # noqa: E501

        Fetch the list of Remo devices the user has access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_devices_get_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :return: Devices
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Devices',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_signals_signal_delete_post(self, signal, **kwargs):  # noqa: E501
        """v1_signals_signal_delete_post  # noqa: E501

        Delete an infrared signal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_signals_signal_delete_post(signal, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str signal: Signal ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_signals_signal_delete_post_with_http_info(signal, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_signals_signal_delete_post_with_http_info(signal, **kwargs)  # noqa: E501
            return data

    def v1_signals_signal_delete_post_with_http_info(self, signal, **kwargs):  # noqa: E501
        """v1_signals_signal_delete_post  # noqa: E501

        Delete an infrared signal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_signals_signal_delete_post_with_http_info(signal, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str signal: Signal ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['signal']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_signals_signal_delete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'signal' is set
        if ('signal' not in params or
                params['signal'] is None):
            raise ValueError("Missing the required parameter `signal` when calling `v1_signals_signal_delete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'signal' in params:
            path_params['signal'] = params['signal']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/signals/{signal}/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_signals_signal_post(self, signal, image, name, **kwargs):  # noqa: E501
        """v1_signals_signal_post  # noqa: E501

        Update infrared signal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_signals_signal_post(signal, image, name, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str signal: Signal ID. (required)
        :param str image: Basename of the image file included in the app. Ex: \"ico_io\"  (required)
        :param str name: Signal name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_signals_signal_post_with_http_info(signal, image, name, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_signals_signal_post_with_http_info(signal, image, name, **kwargs)  # noqa: E501
            return data

    def v1_signals_signal_post_with_http_info(self, signal, image, name, **kwargs):  # noqa: E501
        """v1_signals_signal_post  # noqa: E501

        Update infrared signal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_signals_signal_post_with_http_info(signal, image, name, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str signal: Signal ID. (required)
        :param str image: Basename of the image file included in the app. Ex: \"ico_io\"  (required)
        :param str name: Signal name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['signal', 'image', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_signals_signal_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'signal' is set
        if ('signal' not in params or
                params['signal'] is None):
            raise ValueError("Missing the required parameter `signal` when calling `v1_signals_signal_post`")  # noqa: E501
        # verify the required parameter 'image' is set
        if ('image' not in params or
                params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `v1_signals_signal_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `v1_signals_signal_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'signal' in params:
            path_params['signal'] = params['signal']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/signals/{signal}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_signals_signal_send_post(self, signal, **kwargs):  # noqa: E501
        """v1_signals_signal_send_post  # noqa: E501

        Send infrared signal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_signals_signal_send_post(signal, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str signal: Signal ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_signals_signal_send_post_with_http_info(signal, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_signals_signal_send_post_with_http_info(signal, **kwargs)  # noqa: E501
            return data

    def v1_signals_signal_send_post_with_http_info(self, signal, **kwargs):  # noqa: E501
        """v1_signals_signal_send_post  # noqa: E501

        Send infrared signal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_signals_signal_send_post_with_http_info(signal, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str signal: Signal ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['signal']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_signals_signal_send_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'signal' is set
        if ('signal' not in params or
                params['signal'] is None):
            raise ValueError("Missing the required parameter `signal` when calling `v1_signals_signal_send_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'signal' in params:
            path_params['signal'] = params['signal']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/signals/{signal}/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_me_get(self, **kwargs):  # noqa: E501
        """v1_users_me_get  # noqa: E501

        Fetch the authenticated user's information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_users_me_get(_async=True)
        >>> result = thread.get()

        :param async bool
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_users_me_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_me_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_users_me_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_users_me_get  # noqa: E501

        Fetch the authenticated user's information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_users_me_get_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_me_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/users/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_me_post(self, nickname, **kwargs):  # noqa: E501
        """v1_users_me_post  # noqa: E501

        Update authenticated user's information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_users_me_post(nickname, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str nickname: User's nickname.  (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v1_users_me_post_with_http_info(nickname, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_me_post_with_http_info(nickname, **kwargs)  # noqa: E501
            return data

    def v1_users_me_post_with_http_info(self, nickname, **kwargs):  # noqa: E501
        """v1_users_me_post  # noqa: E501

        Update authenticated user's information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass _async=True
        >>> thread = api.v1_users_me_post_with_http_info(nickname, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str nickname: User's nickname.  (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nickname']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_me_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nickname' is set
        if ('nickname' not in params or
                params['nickname'] is None):
            raise ValueError("Missing the required parameter `nickname` when calling `v1_users_me_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'nickname' in params:
            form_params.append(('nickname', params['nickname']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/1/users/me', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
