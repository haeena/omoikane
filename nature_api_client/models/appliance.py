# coding: utf-8

"""
    Nature API

    Read/Write Nature Remo  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nature_api_client.models.air_con import AirCon  # noqa: F401,E501
from nature_api_client.models.air_con_params import AirConParams  # noqa: F401,E501
from nature_api_client.models.appliance_model import ApplianceModel  # noqa: F401,E501
from nature_api_client.models.appliance_type import ApplianceType  # noqa: F401,E501
from nature_api_client.models.device_core import DeviceCore  # noqa: F401,E501
from nature_api_client.models.id import Id  # noqa: F401,E501
from nature_api_client.models.image import Image  # noqa: F401,E501
from nature_api_client.models.signal import Signal  # noqa: F401,E501


class Appliance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'Id',
        'device': 'DeviceCore',
        'model': 'ApplianceModel',
        'nickname': 'str',
        'image': 'Image',
        'type': 'ApplianceType',
        'settings': 'AirConParams',
        'aircon': 'AirCon',
        'signals': 'list[Signal]'
    }

    attribute_map = {
        'id': 'id',
        'device': 'device',
        'model': 'model',
        'nickname': 'nickname',
        'image': 'image',
        'type': 'type',
        'settings': 'settings',
        'aircon': 'aircon',
        'signals': 'signals'
    }

    def __init__(self, id=None, device=None, model=None, nickname=None, image=None, type=None, settings=None, aircon=None, signals=None):  # noqa: E501
        """Appliance - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._device = None
        self._model = None
        self._nickname = None
        self._image = None
        self._type = None
        self._settings = None
        self._aircon = None
        self._signals = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if device is not None:
            self.device = device
        if model is not None:
            self.model = model
        if nickname is not None:
            self.nickname = nickname
        if image is not None:
            self.image = image
        if type is not None:
            self.type = type
        if settings is not None:
            self.settings = settings
        if aircon is not None:
            self.aircon = aircon
        if signals is not None:
            self.signals = signals

    @property
    def id(self):
        """Gets the id of this Appliance.  # noqa: E501


        :return: The id of this Appliance.  # noqa: E501
        :rtype: Id
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Appliance.


        :param id: The id of this Appliance.  # noqa: E501
        :type: Id
        """

        self._id = id

    @property
    def device(self):
        """Gets the device of this Appliance.  # noqa: E501


        :return: The device of this Appliance.  # noqa: E501
        :rtype: DeviceCore
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Appliance.


        :param device: The device of this Appliance.  # noqa: E501
        :type: DeviceCore
        """

        self._device = device

    @property
    def model(self):
        """Gets the model of this Appliance.  # noqa: E501


        :return: The model of this Appliance.  # noqa: E501
        :rtype: ApplianceModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Appliance.


        :param model: The model of this Appliance.  # noqa: E501
        :type: ApplianceModel
        """

        self._model = model

    @property
    def nickname(self):
        """Gets the nickname of this Appliance.  # noqa: E501


        :return: The nickname of this Appliance.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Appliance.


        :param nickname: The nickname of this Appliance.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def image(self):
        """Gets the image of this Appliance.  # noqa: E501


        :return: The image of this Appliance.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Appliance.


        :param image: The image of this Appliance.  # noqa: E501
        :type: Image
        """

        self._image = image

    @property
    def type(self):
        """Gets the type of this Appliance.  # noqa: E501


        :return: The type of this Appliance.  # noqa: E501
        :rtype: ApplianceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Appliance.


        :param type: The type of this Appliance.  # noqa: E501
        :type: ApplianceType
        """

        self._type = type

    @property
    def settings(self):
        """Gets the settings of this Appliance.  # noqa: E501


        :return: The settings of this Appliance.  # noqa: E501
        :rtype: AirConParams
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Appliance.


        :param settings: The settings of this Appliance.  # noqa: E501
        :type: AirConParams
        """

        self._settings = settings

    @property
    def aircon(self):
        """Gets the aircon of this Appliance.  # noqa: E501


        :return: The aircon of this Appliance.  # noqa: E501
        :rtype: AirCon
        """
        return self._aircon

    @aircon.setter
    def aircon(self, aircon):
        """Sets the aircon of this Appliance.


        :param aircon: The aircon of this Appliance.  # noqa: E501
        :type: AirCon
        """

        self._aircon = aircon

    @property
    def signals(self):
        """Gets the signals of this Appliance.  # noqa: E501


        :return: The signals of this Appliance.  # noqa: E501
        :rtype: list[Signal]
        """
        return self._signals

    @signals.setter
    def signals(self, signals):
        """Sets the signals of this Appliance.


        :param signals: The signals of this Appliance.  # noqa: E501
        :type: list[Signal]
        """

        self._signals = signals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Appliance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
