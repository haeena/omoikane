# coding: utf-8

"""
    Nature API

    Read/Write Nature Remo  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nature_api_client.models.air_direction import AirDirection  # noqa: F401,E501
from nature_api_client.models.air_volume import AirVolume  # noqa: F401,E501
from nature_api_client.models.button import Button  # noqa: F401,E501
from nature_api_client.models.operation_mode import OperationMode  # noqa: F401,E501
from nature_api_client.models.temperature import Temperature  # noqa: F401,E501


class AirConParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'temp': 'Temperature',
        'mode': 'OperationMode',
        'vol': 'AirVolume',
        'dir': 'AirDirection',
        'button': 'Button'
    }

    attribute_map = {
        'temp': 'temp',
        'mode': 'mode',
        'vol': 'vol',
        'dir': 'dir',
        'button': 'button'
    }

    def __init__(self, temp=None, mode=None, vol=None, dir=None, button=None):  # noqa: E501
        """AirConParams - a model defined in Swagger"""  # noqa: E501

        self._temp = None
        self._mode = None
        self._vol = None
        self._dir = None
        self._button = None
        self.discriminator = None

        if temp is not None:
            self.temp = temp
        if mode is not None:
            self.mode = mode
        if vol is not None:
            self.vol = vol
        if dir is not None:
            self.dir = dir
        if button is not None:
            self.button = button

    @property
    def temp(self):
        """Gets the temp of this AirConParams.  # noqa: E501


        :return: The temp of this AirConParams.  # noqa: E501
        :rtype: Temperature
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this AirConParams.


        :param temp: The temp of this AirConParams.  # noqa: E501
        :type: Temperature
        """

        self._temp = temp

    @property
    def mode(self):
        """Gets the mode of this AirConParams.  # noqa: E501


        :return: The mode of this AirConParams.  # noqa: E501
        :rtype: OperationMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this AirConParams.


        :param mode: The mode of this AirConParams.  # noqa: E501
        :type: OperationMode
        """

        self._mode = mode

    @property
    def vol(self):
        """Gets the vol of this AirConParams.  # noqa: E501


        :return: The vol of this AirConParams.  # noqa: E501
        :rtype: AirVolume
        """
        return self._vol

    @vol.setter
    def vol(self, vol):
        """Sets the vol of this AirConParams.


        :param vol: The vol of this AirConParams.  # noqa: E501
        :type: AirVolume
        """

        self._vol = vol

    @property
    def dir(self):
        """Gets the dir of this AirConParams.  # noqa: E501


        :return: The dir of this AirConParams.  # noqa: E501
        :rtype: AirDirection
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this AirConParams.


        :param dir: The dir of this AirConParams.  # noqa: E501
        :type: AirDirection
        """

        self._dir = dir

    @property
    def button(self):
        """Gets the button of this AirConParams.  # noqa: E501


        :return: The button of this AirConParams.  # noqa: E501
        :rtype: Button
        """
        return self._button

    @button.setter
    def button(self, button):
        """Sets the button of this AirConParams.


        :param button: The button of this AirConParams.  # noqa: E501
        :type: Button
        """

        self._button = button

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AirConParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
