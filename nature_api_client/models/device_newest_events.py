# coding: utf-8

"""
    Nature API

    Read/Write Nature Remo  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nature_api_client.models.sensor_value import SensorValue  # noqa: F401,E501


class DeviceNewestEvents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'te': 'SensorValue',
        'hu': 'SensorValue',
        'il': 'SensorValue'
    }

    attribute_map = {
        'te': 'te',
        'hu': 'hu',
        'il': 'il'
    }

    def __init__(self, te=None, hu=None, il=None):  # noqa: E501
        """DeviceNewestEvents - a model defined in Swagger"""  # noqa: E501

        self._te = None
        self._hu = None
        self._il = None
        self.discriminator = None

        if te is not None:
            self.te = te
        if hu is not None:
            self.hu = hu
        if il is not None:
            self.il = il

    @property
    def te(self):
        """Gets the te of this DeviceNewestEvents.  # noqa: E501


        :return: The te of this DeviceNewestEvents.  # noqa: E501
        :rtype: SensorValue
        """
        return self._te

    @te.setter
    def te(self, te):
        """Sets the te of this DeviceNewestEvents.


        :param te: The te of this DeviceNewestEvents.  # noqa: E501
        :type: SensorValue
        """

        self._te = te

    @property
    def hu(self):
        """Gets the hu of this DeviceNewestEvents.  # noqa: E501


        :return: The hu of this DeviceNewestEvents.  # noqa: E501
        :rtype: SensorValue
        """
        return self._hu

    @hu.setter
    def hu(self, hu):
        """Sets the hu of this DeviceNewestEvents.


        :param hu: The hu of this DeviceNewestEvents.  # noqa: E501
        :type: SensorValue
        """

        self._hu = hu

    @property
    def il(self):
        """Gets the il of this DeviceNewestEvents.  # noqa: E501


        :return: The il of this DeviceNewestEvents.  # noqa: E501
        :rtype: SensorValue
        """
        return self._il

    @il.setter
    def il(self, il):
        """Sets the il of this DeviceNewestEvents.


        :param il: The il of this DeviceNewestEvents.  # noqa: E501
        :type: SensorValue
        """

        self._il = il

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceNewestEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
